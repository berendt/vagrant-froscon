:toc:

= Getting started with Vagrant

== Prerequisite

* for this tutorial: VirtualBox

== Installation

* https://www.vagrantup.com/
* https://www.vagrantup.com/downloads.html
* https://docs.vagrantup.com/v2/installation/index.html

----
# wget --quiet https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.4_x86_64.deb
# dpkg -i vagrant_1.7.4_x86_64.deb 
Selecting previously unselected package vagrant.
(Reading database ... 104127 files and directories currently installed.)
Preparing to unpack vagrant_1.7.4_x86_64.deb ...
Unpacking vagrant (1:1.7.4) ...
Setting up vagrant (1:1.7.4) ...
----

== Discover Vagrant Boxes

----
# vagrant box list
There are no installed boxes! Use `vagrant box add` to add some.
----

* https://atlas.hashicorp.com/boxes/search

----
# vagrant box add ubuntu/trusty64
==> box: Loading metadata for box 'ubuntu/trusty64'
    box: URL: https://atlas.hashicorp.com/ubuntu/trusty64
==> box: Adding box 'ubuntu/trusty64' (v20150818.0.0) for provider: virtualbox
    box: Downloading: https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20150818.0.0/providers/virtualbox.box
==> box: Successfully added box 'ubuntu/trusty64' (v20150818.0.0) for 'virtualbox'!
----

----
# vagrant box list
ubuntu/trusty64 (virtualbox, 20150818.0.0)
----

== Create an initial Vagrantfile

----
# mkdir 001 && cd 001
# vagrant init -m ubuntu/trusty64
----

* example `001`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
end
----

== Bring the machine up

----
# vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'ubuntu/trusty64'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'ubuntu/trusty64' is up to date...
==> default: Setting the name of the VM: 001_default_1440268660704_74933
==> default: Clearing any previously set forwarded ports...
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 => 2222 (adapter 1)
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection timeout. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: 
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default: 
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it's present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
==> default: Mounting shared folders...
    default: /vagrant => /root/vagrant-froscon/001
----

== Connect to the machine

----
# vagrant ssh
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.13.0-62-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Sat Aug 22 18:38:04 UTC 2015

  System load:  0.99              Processes:           82
  Usage of /:   2.8% of 39.34GB   Users logged in:     0
  Memory usage: 27%               IP address for eth0: 10.0.2.15
  Swap usage:   0%

  Graph this data and manage this system at:
    https://landscape.canonical.com/

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

0 packages can be updated.
0 updates are security updates.


vagrant@vagrant-ubuntu-trusty-64:~$ 
----

----
# vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /root/vagrant-froscon/001/.vagrant/machines/default/virtualbox/private_key
  IdentitiesOnly yes
  LogLevel FATAL
----

== Destroy the machine

----
# vagrant destroy
    default: Are you sure you want to destroy the 'default' VM? [y/N] y
==> default: Forcing shutdown of VM...
==> default: Destroying VM and associated drives...
----

* without a confirmation

----
# vagrant destroy --force
==> default: Forcing shutdown of VM...
==> default: Destroying VM and associated drives...
----

== Set a hostname

* http://docs.vagrantup.com/v2/vagrantfile/machine_settings.html

* example `002`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
end
----

== Specify resources

* http://docs.vagrantup.com/v2/virtualbox/configuration.html

* example `003`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
end
----

== Reload a running machine

* http://docs.vagrantup.com/v2/cli/reload.html

----
# vagrant reload
==> default: Attempting graceful shutdown of VM...
==> default: Checking if box 'ubuntu/trusty64' is up to date...
==> default: Clearing any previously set forwarded ports...
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 => 2222 (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection timeout. Retrying...
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
==> default: Setting hostname...
==> default: Mounting shared folders...
    default: /vagrant => /root/vagrant-froscon/003
==> default: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==> default: flag to force provisioning. Provisioners marked to run always will still run.
----

* same like `vagrant halt` followed by `vagrant up`

== Suspend and resume a machine

----
# vagrant suspend
==> default: Saving VM state and suspending execution...
----

----
# vagrant status
Current machine states:

default                   saved (virtualbox)

To resume this VM, simply run `vagrant up`.
----

----
# vagrant resume
==> default: Resuming suspended VM...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection refused. Retrying...
==> default: Machine booted and ready!
----

== Forwarded ports

* http://docs.vagrantup.com/v2/networking/forwarded_ports.html

* example `004`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
end
----

----
[...]
==> default: Forwarding ports...
    default: 80 => 8080 (adapter 1)
    default: 22 => 2222 (adapter 1)
[...]
----

== Internal networks

* http://docs.vagrantup.com/v2/networking/private_network.html

=== Host-only

* https://www.virtualbox.org/manual/ch06.html#network_hostonly

* example `005`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
end
----

----
[...]
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: hostonly
[...]
----

== Internal

* https://www.virtualbox.org/manual/ch06.html#network_internal

----
  config.vm.network "private_network", ip: "192.168.50.4",
    virtualbox__intnet: true
----

----
[...]
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: intnet
[...]
----

* example `006`

----
  config.vm.network "private_network", ip: "192.168.50.4",
    virtualbox__intnet: "testing"
----

== Provisioning

* http://docs.vagrantup.com/v2/provisioning/index.html

=== Copy files

* http://docs.vagrantup.com/v2/provisioning/file.html

* example `007`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.provision "file", source: "important_file", destination: "important_file"
end
----

----
[...]
==> default: Running provisioner: file...
[...]
----

=== Script

==== Inline

* example `008`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.provision "file", source: "important_file", destination: "important_file"
  config.vm.provision "shell", inline: "echo Hello FrOSCon; date > /etc/vagrant_provisioned_at"
end
----

----
[...]
==> default: Running provisioner: shell...
    default: Running: inline script
==> default: stdin: is not a tty
==> default: Hello FrOSCon
[...]
----

* https://github.com/mitchellh/vagrant/issues/1673 => `config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"`

* example `009`

----
$script = <<SCRIPT
echo Hello FrOSCon
date > /etc/vagrant_provisioned_at
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.provision "file", source: "important_file", destination: "important_file"
  config.vm.provision "shell", inline: $script
end
----

==== File

* example `010`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.provision "file", source: "important_file", destination: "important_file"
  config.vm.provision "shell", path: "script.sh"
end
----

----
[...]
==> default: Running provisioner: shell...
    default: Running: /tmp/vagrant-shell20150822-3820-mio3gb.sh
==> default: stdin: is not a tty
==> default: Hello FrOSCon
[...]
----

=== Ansible

* `playbook.yaml`

* example `011`

----
---
- hosts: all
  tasks:
    - apt: name=vim update_cache=yes state=latest
      sudo: True
----

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.provision "file", source: "important_file", destination: "important_file"
  config.vm.provision "shell", path: "script.sh"
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "playbook.yaml"
  end
end
----

----
ansible provisioner:
* `playbook` for the Ansible provisioner does not exist on the host system: /root/vagrant-froscon/011/playbook.yml
----

* `apt-get install -y ansible`

----
[...]
==> default: Running provisioner: ansible...

PLAY [all] ******************************************************************** 

GATHERING FACTS *************************************************************** 
ok: [default]

TASK: [apt name=vim update_cache=yes state=latest] **************************** 
ok: [default]

PLAY RECAP ******************************************************************** 
default                    : ok=2    changed=0    unreachable=0    failed=0   
[...]
----

== Synced folders

* http://docs.vagrantup.com/v2/synced-folders/index.html

* example `012`

----
# mount
[...]
vagrant on /vagrant type vboxsf (uid=1000,gid=1000,rw)
----

----
[...]
config.vm.synced_folder ".", "/vagrant", disabled: true
[...]
----

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.provision "file", source: "important_file", destination: "important_file"
  config.vm.provision "shell", path: "script.sh"
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "playbook.yaml"
  end
  config.vm.synced_folder "syncme/", "/opt/syncme"
end
----

----
[...]
==> default: Mounting shared folders...
    default: /vagrant => /root/vagrant-froscon/012
    default: /opt/syncme => /root/vagrant-froscon/012/syncme
[...]
----

----
# mount
[...]
opt_syncme on /opt/syncme type vboxsf (uid=1000,gid=1000,rw)
----

== Multi-machine environments

* http://docs.vagrantup.com/v2/multi-machine/

* example `013`

----
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.provision "file", source: "important_file", destination: "important_file"
  config.vm.provision "shell", path: "script.sh"
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "playbook.yaml"
  end
  config.vm.synced_folder "syncme/", "/opt/syncme"
  config.vm.define "first" do |node|
    node.vm.name = "first"
    node.vm.network "forwarded_port", guest: 80, host: 8080
    node.vm.network "private_network", ip: "192.168.50.4"
  end
  config.vm.define "second" do |node|
    node.vm.name = "second"
    node.vm.network "forwarded_port", guest: 80, host: 8081
    node.vm.network "private_network", ip: "192.168.50.5"
  end
end
----

----
Bringing machine 'first' up with 'virtualbox' provider...
Bringing machine 'second' up with 'virtualbox' provider...
[...]
----

* `vagrant ssh first`
* `vagrant ssh second`

----
# vagrant status
Current machine states:

first                     running (virtualbox)
second                    running (virtualbox)

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
----

== Packaging

* http://docs.vagrantup.com/v2/cli/package.html
* https://packer.io/
* https://github.com/boxcutter/
* https://github.com/chef/bento/

----
# vagrant package
==> default: Attempting graceful shutdown of VM...
==> default: Clearing any previously set forwarded ports...
==> default: Exporting VM...
==> default: Compressing package to: /root/vagrant-froscon/001/package.box
----

----
# vagrant box add --name our_new_box package.box
==> box: Box file was not detected as metadata. Adding it directly...
==> box: Adding box 'our_new_box' (v0) for provider: 
    box: Unpacking necessary files from: file:///root/vagrant-froscon/001/package.box
==> box: Successfully added box 'our_new_box' (v0) for 'virtualbox'!
----

----
# vagrant box list
our_new_box     (virtualbox, 0)
ubuntu/trusty64 (virtualbox, 20150818.0.0)
----

----
# vagrant init -m our_new_box
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
----

== Sharing

* https://docs.vagrantup.com/v2/share/index.html

* example `014`

=== HTTP

----
$script = <<SCRIPT
apt-get update && apt-get install -y apache2
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "vagrant"
  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
    v.cpus = 2
  end
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.provision "shell", inline: $script
end
----

* https://atlas.hashicorp.com/

----
# vagrant login
In a moment we will ask for your username and password to HashiCorp's
Atlas. After authenticating, we will store an access token locally on
disk. Your login details will be transmitted over a secure connection, and
are never stored on disk locally.

If you do not have an Atlas account, sign up at
https://atlas.hashicorp.com.

Atlas Username: yourusername
Password (will be hidden): 
You are now logged in.
----

----
# vagrant share
==> default: Detecting network information for machine...
    default: Local machine address: 127.0.0.1
    default:  
    default: Note: With the local address (127.0.0.1), Vagrant Share can only
    default: share any ports you have forwarded. Assign an IP or address to your
    default: machine to expose all TCP ports. Consult the documentation
    default: for your provider ('virtualbox') for more information.
    default:  
    default: Local HTTP port: 8080
    default: Local HTTPS port: disabled
    default: Port: 2222
    default: Port: 8080
==> default: Checking authentication and authorization...
==> default: Creating Vagrant Share session...
    default: Share will be at: horrid-horse-6802
==> default: Your Vagrant Share is running! Name: horrid-horse-6802
==> default: URL: http://horrid-horse-6802.vagrantshare.com
==> default:  
==> default: You're sharing your Vagrant machine in "restricted" mode. This
==> default: means that only the ports listed above will be accessible by
==> default: other users (either via the web URL or using `vagrant connect`).
----

=== SSH

----
# vagrant share --ssh --ssh-no-password
==> default: Detecting network information for machine...
    default: Local machine address: 127.0.0.1
    default:  
    default: Note: With the local address (127.0.0.1), Vagrant Share can only
    default: share any ports you have forwarded. Assign an IP or address to your
    default: machine to expose all TCP ports. Consult the documentation
    default: for your provider ('virtualbox') for more information.
    default:  
    default: Local HTTP port: 8080
    default: Local HTTPS port: disabled
    default: SSH Port: 2222
    default: Port: 2222
    default: Port: 8080
==> default: Generating new SSH key...
    default: Inserting generated SSH key into machine...
==> default: Checking authentication and authorization...
==> default: Creating Vagrant Share session...
    default: Share will be at: generous-lemur-5016
==> default: Your Vagrant Share is running! Name: generous-lemur-5016
==> default: URL: http://generous-lemur-5016.vagrantshare.com
==> default:  
==> default: You're sharing your Vagrant machine in "restricted" mode. This
==> default: means that only the ports listed above will be accessible by
==> default: other users (either via the web URL or using `vagrant connect`).
==> default:  
==> default: You're sharing with SSH access. This means that another user
==> default: simply has to run `vagrant connect --ssh generous-lemur-5016`
==> default: to SSH to your Vagrant machine.
----

----
# vagrant connect --ssh generous-lemur-5016
Loading share 'generous-lemur-5016'...
Executing SSH...
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.13.0-62-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Sat Aug 22 20:40:44 UTC 2015

  System load:  0.02              Processes:           89
  Usage of /:   2.9% of 39.34GB   Users logged in:     0
  Memory usage: 14%               IP address for eth0: 10.0.2.15
  Swap usage:   0%

  Graph this data and manage this system at:
    https://landscape.canonical.com/

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud


vagrant@vagrant:~$ 
----

== Ruby inside a Vagrantfile

* `Vagrantfile`

* example `015`

----
require 'yaml'

unless defined? ENVIRONMENT  
  environment_file = File.join(File.dirname(__FILE__), 'environment.yaml')
  ENVIRONMENT = YAML.load(File.open(environment_file, File::RDONLY).read)
end

Vagrant.configure(2) do |config|  
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true
  ENVIRONMENT.each do |name, details|
    config.vm.define name do |node|
      node.vm.box = details['box']
      node.vm.hostname = name
      node.vm.network :private_network, ip: details['address']
      node.vm.provider 'virtualbox' do |vb|
        vb.customize ['modifyvm', :id, '--memory', details['memory']]
        vb.customize ['modifyvm', :id, '--cpus', details['cpus']]
      end
      if details.has_key?('storage')
        node.vm.provider 'virtualbox' do |vb|
          vb.customize ['createhd', '--filename', "#{name}.vdi",
                        '--size', details['storage']]
          vb.customize ['storageattach', :id, '--storagectl',
                        'SATA Controller', '--port', 1, '--device',
                        0, '--type', 'hdd', '--medium', "#{name}.vdi"]
        end
      end
    end
  end
end  
----

* `environment.yaml`

----
---
controller:  
  memory: 8192
  cpus: 4
  address: 10.25.25.10
  box: boxcutter/centos71
network:  
  memory: 4096
  cpus: 2
  address: 10.25.25.20
  box: boxcutter/centos71
----

== Plugins

* http://docs.vagrantup.com/v2/plugins/index.html
* https://github.com/mitchellh/vagrant/wiki/Available-Vagrant-Plugins

----
# vagrant plugin list
vagrant-share (1.1.4, system)
----

----
# vagrant plugin install vagrant-openstack-provider
Installing the 'vagrant-openstack-provider' plugin. This can take a few minutes...
Installed the plugin 'vagrant-openstack-provider (0.7.0)'!
----

----
unless Vagrant.has_plugin?("vagrant-openstack-provider")
  raise "vagrant-openstack-provider is not installed"
end
----

== Provider

* http://docs.vagrantup.com/v2/providers/index.html

* example `016`

* `openrc` file

----
export OS_AUTH_URL=http://10.100.0.1:5000/v2.0
export OS_TENANT_NAME="vagrant"
export OS_PROJECT_NAME="vagrant"
export OS_USERNAME="vagrant"
export OS_PASSWORD=password
export OS_REGION_NAME="RegionOne"
----

----
require 'vagrant-openstack-provider'

Vagrant.configure('2') do |config|
  config.ssh.username = 'ubuntu'

  config.vm.provider :openstack do |os|
    os.openstack_auth_url = 'http://10.100.0.1:5000/v2.0'
    os.username           = 'vagrant'
    os.password           = 'password'
    os.tenant_name        = 'vagrant'
    os.flavor             = 'm1.small'
    os.image              = 'Ubuntu 14.04'
    os.floating_ip_pool   = 'public'
  end
end
----

* `vagrant up --provider=openstack`
